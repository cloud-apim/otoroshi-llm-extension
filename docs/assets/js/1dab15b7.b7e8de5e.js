"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1086],{1493:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=o(4848),s=o(8453);o(9229);const i={sidebar_position:4},r="MCP Connectors",c={id:"function-calling/mcp-connectors",title:"MCP Connectors",description:"MCP connectors are tools to connect to MCP servers.",source:"@site/docs/function-calling/mcp-connectors.mdx",sourceDirName:"function-calling",slug:"/function-calling/mcp-connectors",permalink:"/otoroshi-llm-extension/docs/function-calling/mcp-connectors",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"MCP (Model Context Protocol)",permalink:"/otoroshi-llm-extension/docs/function-calling/mcp"},next:{title:"MCP server exposition",permalink:"/otoroshi-llm-extension/docs/function-calling/mcp-plugins"}},l={},a=[{value:"Default config",id:"default-config",level:2},{value:"Example with Filesystem MCP Server",id:"example-with-filesystem-mcp-server",level:2},{value:"Filesystem MCP Connector configuration",id:"filesystem-mcp-connector-configuration",level:3},{value:"Example with Github MCP Server",id:"example-with-github-mcp-server",level:2},{value:"Github MCP Connector configuration",id:"github-mcp-connector-configuration",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"mcp-connectors",children:"MCP Connectors"}),"\n",(0,t.jsx)(e.p,{children:"MCP connectors are tools to connect to MCP servers."}),"\n",(0,t.jsxs)(e.p,{children:["You can find a list of pre-build MCP servers from ",(0,t.jsx)(e.a,{href:"https://github.com/modelcontextprotocol/servers",children:"this repository"})]}),"\n",(0,t.jsxs)(e.p,{children:["We will add examples with pre-build entities from ",(0,t.jsx)(e.a,{href:"https://github.com/cloud-apim/mcp-connectors-examples",children:"our repository"})]}),"\n",(0,t.jsxs)(e.p,{children:["Here is the ",(0,t.jsx)(e.code,{children:"MCP connector"})," configuration :"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "_loc": {\n    "tenant": "default",\n    "teams": [\n      "default"\n    ]\n  },\n  "id": "mcp-connector_23d9b4db-1593-426e-b205-b5f331f78f1d",\n  "name": "github-mcp",\n  "description": "github-mcp",\n  "metadata": {},\n  "tags": [],\n  "pool": {\n    "size": 1\n  },\n  "transport": {\n    "kind": "stdio",\n    "options": {\n      "command": "npx",\n      "args": [\n        "-y",\n        "@modelcontextprotocol/server-github"\n      ],\n      "env": {\n        "GITHUB_PERSONAL_ACCESS_TOKEN": "${vault://local/mcp-github-token}"\n      }\n    }\n  },\n  "strict": false,\n  "kind": "ai-gateway.extensions.cloud-apim.com/McpConnector"\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Here is the ",(0,t.jsx)(e.code,{children:"LLM Provider"})," configuration :"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "_loc": {\n    "tenant": "default",\n    "teams": [\n      "default"\n    ]\n  },\n  "id": "provider_480ec0b7-bc9e-487f-8376-b9b8111bfe5e",\n  "name": "OpenAI provider",\n  "description": "An OpenAI LLM api provider",\n  "metadata": {},\n  "tags": [],\n  "provider": "openai",\n  "connection": {\n    "base_url": "https://api.openai.com/v1",\n    "token": "${vault://local/openai-token}",\n    "timeout": 30000\n  },\n  "options": {\n    "model": "gpt-4o-mini",\n    "frequency_penalty": null,\n    "logit_bias": null,\n    "logprobs": null,\n    "top_logprobs": null,\n    "max_tokens": null,\n    "n": 1,\n    "presence_penalty": null,\n    "response_format": null,\n    "seed": null,\n    "stop": null,\n    "stream": false,\n    "temperature": 1,\n    "top_p": 1,\n    "tools": null,\n    "tool_choice": null,\n    "user": null,\n    "wasm_tools": [],\n    "mcp_connectors": [\n      "mcp-connector_23d9b4db-1593-426e-b205-b5f331f78f1d"\n    ],\n    "allow_config_override": true\n  },\n  "provider_fallback": null,\n  "context": {\n    "default": null,\n    "contexts": []\n  },\n  "models": {\n    "include": [],\n    "exclude": []\n  },\n  "guardrails": [],\n  "guardrails_fail_on_deny": false,\n  "cache": {\n    "strategy": "none",\n    "ttl": 300000,\n    "score": 0.8\n  },\n  "kind": "ai-gateway.extensions.cloud-apim.com/Provider"\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Here is the ",(0,t.jsx)(e.code,{children:"route"})," configuration :"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "_loc": {\n    "tenant": "default",\n    "teams": [\n      "default"\n    ]\n  },\n  "id": "route_79c1d15ae-5e64-482c-9a29-4b7dcad36089",\n  "name": "mcp-openai",\n  "description": "mcp-openai",\n  "tags": [],\n  "metadata": {},\n  "enabled": true,\n  "debug_flow": false,\n  "export_reporting": false,\n  "capture": false,\n  "groups": [\n    "default"\n  ],\n  "bound_listeners": [],\n  "frontend": {\n    "domains": [\n      "mcp-openai.oto.tools"\n    ],\n    "strip_path": true,\n    "exact": false,\n    "headers": {},\n    "query": {},\n    "methods": []\n  },\n  "backend": {\n    "targets": [\n      {\n        "id": "target_1",\n        "hostname": "request.otoroshi.io",\n        "port": 443,\n        "tls": true,\n        "weight": 1,\n        "predicate": {\n          "type": "AlwaysMatch"\n        },\n        "protocol": "HTTP/1.1",\n        "ip_address": null,\n        "tls_config": {\n          "certs": [],\n          "trusted_certs": [],\n          "enabled": false,\n          "loose": false,\n          "trust_all": false\n        }\n      }\n    ],\n    "root": "/",\n    "rewrite": false,\n    "load_balancing": {\n      "type": "RoundRobin"\n    },\n    "client": {\n      "retries": 1,\n      "max_errors": 20,\n      "retry_initial_delay": 50,\n      "backoff_factor": 2,\n      "call_timeout": 30000,\n      "call_and_stream_timeout": 120000,\n      "connection_timeout": 10000,\n      "idle_timeout": 60000,\n      "global_timeout": 30000,\n      "sample_interval": 2000,\n      "proxy": {},\n      "custom_timeouts": [],\n      "cache_connection_settings": {\n        "enabled": false,\n        "queue_size": 2048\n      }\n    },\n    "health_check": {\n      "enabled": false,\n      "url": "",\n      "timeout": 5000,\n      "healthyStatuses": [],\n      "unhealthyStatuses": []\n    }\n  },\n  "backend_ref": null,\n  "plugins": [\n    {\n      "enabled": true,\n      "debug": false,\n      "plugin": "cp:otoroshi.next.plugins.OverrideHost",\n      "include": [],\n      "exclude": [],\n      "config": {},\n      "bound_listeners": [],\n      "plugin_index": {\n        "transform_request": 0\n      },\n      "nodeId": "cp:otoroshi.next.plugins.OverrideHost"\n    },\n    {\n      "enabled": true,\n      "debug": false,\n      "plugin": "cp:otoroshi_plugins.com.cloud.apim.otoroshi.extensions.aigateway.plugins.OpenAiCompatProxy",\n      "include": [],\n      "exclude": [],\n      "config": {\n        "refs": [\n          "provider_480ec0b7-bc9e-487f-8376-b9b8111bfe5e"\n        ]\n      },\n      "bound_listeners": [],\n      "plugin_index": {},\n      "nodeId": "cp:otoroshi_plugins.com.cloud.apim.otoroshi.extensions.aigateway.plugins.OpenAiCompatProxy"\n    }\n  ],\n  "kind": "proxy.otoroshi.io/Route"\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(408).A+"",width:"1534",height:"580"})}),"\n",(0,t.jsx)(e.h2,{id:"default-config",children:"Default config"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "command": "node",\n  "args": [\n    "/foo/bar/server.js"\n  ],\n  "env": {\n    "TOKEN": "secret"\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"example-with-filesystem-mcp-server",children:"Example with Filesystem MCP Server"}),"\n",(0,t.jsx)(e.h3,{id:"filesystem-mcp-connector-configuration",children:"Filesystem MCP Connector configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "command": "npx",\n  "args": [\n    "-y",\n    "@modelcontextprotocol/server-filesystem",\n    "/Users/your-user/Desktop"\n  ]\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"example-with-github-mcp-server",children:"Example with Github MCP Server"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:o(9139).A+"",width:"1534",height:"580"})}),"\n",(0,t.jsx)(e.p,{children:"To use the Github MCP server you will need to generate a Github access token."}),"\n",(0,t.jsx)(e.p,{children:"Then, we will put the token into our local vault."}),"\n",(0,t.jsxs)(e.p,{children:["Go to ",(0,t.jsx)(e.a,{href:"http://otoroshi.oto.tools:8080/bo/dashboard/dangerzone",children:"your Otoroshi danger zone"})," and go to ",(0,t.jsx)(e.code,{children:"Global Metadata"})," section."]}),"\n",(0,t.jsx)(e.p,{children:"Right after, you can create a new KEY, VALUE pair like this example (in the Otoroshi environment) :"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "mcp-github-token": "YOUR_GITHUB_TOKEN_HERE"\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"github-mcp-connector-configuration",children:"Github MCP Connector configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'{\n  "command": "npx",\n  "args": [\n    "-y",\n    "@modelcontextprotocol/server-github"\n  ],\n  "env": {\n    "GITHUB_PERSONAL_ACCESS_TOKEN": "${vault://local/mcp-github-token}"\n  }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Now you can use Github MCP server's functions to Create issues, list all issues, list pull requests and much more with your favorite LLMs !"})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},9229:(n,e,o)=>{o(6540),o(4848)},9139:(n,e,o)=>{o.d(e,{A:()=>t});const t=o.p+"assets/images/mcp-connector-with-vault-52282bfef1a0cbe35d845d4c096bee23.png"},408:(n,e,o)=>{o.d(e,{A:()=>t});const t=o.p+"assets/images/mcp-connectors-1-5db2bf835037a832567c7cc2cdb3c468.png"},8453:(n,e,o)=>{o.d(e,{R:()=>r,x:()=>c});var t=o(6540);const s={},i=t.createContext(s);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);